// <autogenerated>
//    This code was generated by FxKit. Manual edits will not be saved.
// </autogenerated>
#nullable enable
using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;

namespace Super.Duper.Unions;

public abstract partial record CSharpLanguageIssues
{
    public sealed partial record TerribleLambdaInference : CSharpLanguageIssues
    {
        /// <summary>
        ///     The same as "new TerribleLambdaInference" but the return type is that of the base type.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [ExcludeFromCodeCoverage]
        [DebuggerHidden]
        public static CSharpLanguageIssues Of() =>
            new TerribleLambdaInference();

        /// <summary>
        ///     A Func variant for 'Of'
        /// </summary>
        public static readonly Func<CSharpLanguageIssues> λ = Of;
    }

    public sealed partial record NoExhaustiveMatch : CSharpLanguageIssues
    {
        /// <summary>
        ///     The same as "new NoExhaustiveMatch" but the return type is that of the base type.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [ExcludeFromCodeCoverage]
        [DebuggerHidden]
        public static CSharpLanguageIssues Of(
            global::System.Collections.Generic.List<string> PotentialSolutions) =>
            new NoExhaustiveMatch(
                PotentialSolutions);

        /// <summary>
        ///     A Func variant for 'Of'
        /// </summary>
        public static readonly Func<global::System.Collections.Generic.List<string>, CSharpLanguageIssues> λ = Of;
    }

    public sealed partial record NoHigherKindedTypes : CSharpLanguageIssues
    {
        /// <summary>
        ///     The same as "new NoHigherKindedTypes" but the return type is that of the base type.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [ExcludeFromCodeCoverage]
        [DebuggerHidden]
        public static CSharpLanguageIssues Of(
            global::System.Collections.Generic.List<string> PotentialSolutions,
            bool CanBeDebated) =>
            new NoHigherKindedTypes(
                PotentialSolutions,
                CanBeDebated);

        /// <summary>
        ///     A Func variant for 'Of'
        /// </summary>
        public static readonly Func<global::System.Collections.Generic.List<string>, bool, CSharpLanguageIssues> λ = Of;
    }

    public sealed partial record NoDiscriminatedUnions : CSharpLanguageIssues
    {
        /// <summary>
        ///     The same as "new NoDiscriminatedUnions" but the return type is that of the base type.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [ExcludeFromCodeCoverage]
        [DebuggerHidden]
        public static CSharpLanguageIssues Of() =>
            new NoDiscriminatedUnions();

        /// <summary>
        ///     A Func variant for 'Of'
        /// </summary>
        public static readonly Func<CSharpLanguageIssues> λ = Of;
    }

    /// <summary>
    ///     Performs an exhaustive match on the union constituents.
    /// </summary>
    public TResult Match<TResult>(
        Func<TerribleLambdaInference, TResult> TerribleLambdaInference,
        Func<NoExhaustiveMatch, TResult> NoExhaustiveMatch,
        Func<NoHigherKindedTypes, TResult> NoHigherKindedTypes,
        Func<NoDiscriminatedUnions, TResult> NoDiscriminatedUnions) => this switch
    {
        CSharpLanguageIssues.TerribleLambdaInference x => TerribleLambdaInference(x),
        CSharpLanguageIssues.NoExhaustiveMatch x => NoExhaustiveMatch(x),
        CSharpLanguageIssues.NoHigherKindedTypes x => NoHigherKindedTypes(x),
        CSharpLanguageIssues.NoDiscriminatedUnions x => NoDiscriminatedUnions(x),
        _ => throw new ArgumentOutOfRangeException(message: $"The type '{this.GetType()}' is not a known variant of CSharpLanguageIssues", innerException: null)
    };
}
