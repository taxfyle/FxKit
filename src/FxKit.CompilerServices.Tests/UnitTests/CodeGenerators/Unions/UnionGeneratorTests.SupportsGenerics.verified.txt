// <autogenerated>
//    This code was generated by FxKit. Manual edits will not be saved.
// </autogenerated>
#nullable enable
using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;

namespace Super.Duper.Unions;

public abstract partial record Option<T>
{
    public sealed partial record Some : Option<T>
    {
        /// <summary>
        ///     The same as "new Some" but the return type is that of the base type.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [ExcludeFromCodeCoverage]
        [DebuggerHidden]
        public static Option<T> Of(
            T Value) =>
            new Some(
                Value);

        /// <summary>
        ///     A Func variant for 'Of'
        /// </summary>
        public static readonly Func<T, Option<T>> λ = Of;
    }

    public sealed partial record None : Option<T>
    {
        /// <summary>
        ///     The same as "new None" but the return type is that of the base type.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        [ExcludeFromCodeCoverage]
        [DebuggerHidden]
        public static Option<T> Of() =>
            new None();

        /// <summary>
        ///     A Func variant for 'Of'
        /// </summary>
        public static readonly Func<Option<T>> λ = Of;
    }

    /// <summary>
    ///     Performs an exhaustive match on the union constituents.
    /// </summary>
    public TResult Match<TResult>(
        Func<Some, TResult> Some,
        Func<None, TResult> None) => this switch
    {
        Option<T>.Some x => Some(x),
        Option<T>.None x => None(x),
        _ => throw new ArgumentOutOfRangeException(message: $"The type '{this.GetType()}' is not a known variant of Option", innerException: null)
    };
}