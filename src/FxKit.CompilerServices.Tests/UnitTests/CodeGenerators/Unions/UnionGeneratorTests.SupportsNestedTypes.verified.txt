// <autogenerated>
//    This code was generated by FxKit. Manual edits will not be saved.
// </autogenerated>
#nullable enable
using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;

namespace Super.Duper.Unions;

public partial class One
{
    public abstract partial record Problem
    {
        public sealed partial record Invalid : Problem
        {
            /// <summary>
            ///     The same as "new Invalid" but the return type is that of the base type.
            /// </summary>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            [ExcludeFromCodeCoverage]
            [DebuggerHidden]
            public static Problem Of() =>
                new Invalid();

            /// <summary>
            ///     A Func variant for 'Of'
            /// </summary>
            public static readonly Func<Problem> λ = Of;
        }

        public sealed partial record Denied : Problem
        {
            /// <summary>
            ///     The same as "new Denied" but the return type is that of the base type.
            /// </summary>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            [ExcludeFromCodeCoverage]
            [DebuggerHidden]
            public static Problem Of() =>
                new Denied();

            /// <summary>
            ///     A Func variant for 'Of'
            /// </summary>
            public static readonly Func<Problem> λ = Of;
        }

        /// <summary>
        ///     Performs an exhaustive match on the union constituents.
        /// </summary>
        public TResult Match<TResult>(
            Func<Invalid, TResult> Invalid,
            Func<Denied, TResult> Denied) => this switch
        {
            Problem.Invalid x => Invalid(x),
            Problem.Denied x => Denied(x),
            _ => throw new ArgumentOutOfRangeException(message: $"The type '{this.GetType()}' is not a known variant of Problem", innerException: null)
        };
    }

}

-------------

// <autogenerated>
//    This code was generated by FxKit. Manual edits will not be saved.
// </autogenerated>
#nullable enable
using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;

namespace Super.Duper.Unions;

public partial class Two
{
    public abstract partial record Problem
    {
        public sealed partial record Invalid : Problem
        {
            /// <summary>
            ///     The same as "new Invalid" but the return type is that of the base type.
            /// </summary>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            [ExcludeFromCodeCoverage]
            [DebuggerHidden]
            public static Problem Of() =>
                new Invalid();

            /// <summary>
            ///     A Func variant for 'Of'
            /// </summary>
            public static readonly Func<Problem> λ = Of;
        }

        public sealed partial record Denied : Problem
        {
            /// <summary>
            ///     The same as "new Denied" but the return type is that of the base type.
            /// </summary>
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            [ExcludeFromCodeCoverage]
            [DebuggerHidden]
            public static Problem Of() =>
                new Denied();

            /// <summary>
            ///     A Func variant for 'Of'
            /// </summary>
            public static readonly Func<Problem> λ = Of;
        }

        /// <summary>
        ///     Performs an exhaustive match on the union constituents.
        /// </summary>
        public TResult Match<TResult>(
            Func<Invalid, TResult> Invalid,
            Func<Denied, TResult> Denied) => this switch
        {
            Problem.Invalid x => Invalid(x),
            Problem.Denied x => Denied(x),
            _ => throw new ArgumentOutOfRangeException(message: $"The type '{this.GetType()}' is not a known variant of Problem", innerException: null)
        };
    }

}